package Tanque;

import Mapa.*;
import Obstaculo.Obstacle;

public abstract class Character extends Element{
	protected int speedMove, resistance, movImage, points;
	protected String direction;
	
	protected int dx;
	protected int dy;
	
	public Character(int speedM,int res,String n,String dir, int x, int y, Map map, int posx, int posy){
		super(n+" "+dir+"-mov1", x, y, map, posx, posy);
		speedMove=speedM;
		resistance=res;
		direction=dir;
		movImage=0;
	}
	
	public void setSpeedMove(int s){
		speedMove=s;
	}
	public void setResistance(int r){
		resistance=r;
	}
	public void setPoints(int p){
		points=p;
	}
	public void move(){
		if(dx!=0){
			int auxX= getNewPos(x+dx);
			if((x+dx)<0){
				x=0;
			}
			else{
				if((x+dx+34)>676){
					x=634;
					}
				else{
					Obstacle obs1= map.getObstacle(auxX, posY);
					Obstacle obs2= null;
					if(betweenTwoCell(y)){
						obs2=map.getObstacle(posX, posY+1);
					}
					if((obs1==null)&&(obs2==null)){
						x+=dx;
						posX=auxX;
					}
				}
			}
		}
		if(dy!=0){
			int auxY= getNewPos(y+dy);
			if((y+dy)<0){
				y=0;
				}
			else{
				if((y+dy+34)>676){
					y=634;
					}
				else{
					Obstacle obs1= map.getObstacle(posX, auxY);
					Obstacle obs2=null;
					if(betweenTwoCell(x)){
						obs2=map.getObstacle(posX+1, posY);
					}
					if((obs1==null)&&(obs2==null)){
						y+=dy;
						posY=auxY;
					}
				}
			}
		}
		map.getPlay().getEtiquetaPuntos().setText("x: "+posX+" /y: "+posY);
		map.repaint();
	}
	public abstract void attack();
	
	public int[] generatePosShot(){
		int ejeX=0;
		int ejeY=0;
		switch(direction){
		case "arriba":
			ejeX=(this.x+(this.getWidth()/2));
			ejeY=(this.y);
			break;
		case "abajo":
			ejeX=(this.x+(this.getWidth()/2));
			ejeY=(this.y+this.getHeight());
			break;
		case "izquierda":
			ejeX=(this.x);
			ejeY=(this.y+(this.getHeight()/2));
			break;
		case "derecha":
			ejeX=(this.x+this.getWidth());
			ejeY=(this.y+(this.getHeight()/2));
			break;
		}
		int[] retorno=new int[2];
		retorno[0]=ejeX;
		retorno[1]=ejeY;
		return retorno;
	}
	public int getSpeedMove(){
		return speedMove;
	}
	public int getResistance(){
		return resistance;
	}
	public String getDirection(){
		return direction;
	}
	public int getPoints(){
		return points;
	}
	public int getWidth(){
		if(direction=="arriba"||direction=="abajo"){
			return 38;
		}
		else{
			return 34;
		}
	}
	public int getHeight(){
		if(direction=="arriba"||direction=="abajo"){
			return 34;
		}
		else{
			return 38;
		}
	}
	private boolean betweenTwoCell(int graphPos){
		boolean twoCell=true;
		int aux1=0;
		int aux2=52;
		for(int i=0;(i<map.getMap().length)&&(twoCell);i++){
			if((graphPos>=aux1)&&((graphPos+38)<aux2)){
				twoCell=false;
			}
			else{
				aux1=aux2;
				aux2+=52;
			}
		}
		return twoCell;
	}
	private int getNewPos(int newPosGraph){
		int newPos=0;
		int aux1=0;
		int aux2=52;
		boolean found=false;
		for(int i=0;(i<map.getMap().length-1)&&(!found);i++){
			if((newPosGraph>=aux1)&&((newPosGraph+34)<aux2)){
				found=true;
			}
			else{
				if((newPosGraph<aux2)&&((newPosGraph+34)>=aux2)){
					found=true;
					if((direction=="abajo")||(direction=="derecha")){
						newPos++;
					}
				}
				else{
					aux1=aux2;
					aux2+=52;
					newPos++;
					}
			}
		}
		return newPos;
	}
}